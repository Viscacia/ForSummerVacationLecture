커밋: 로컬에 저장, 저장을 원하는 파일 묶어 커밋
스테이지: 커밋전 저장 원하는 파일 묶기
푸시: 깃헙에 업로드

파일 내용에 +: 새로 변경된 내용

코드 뭉치 버리기: 수정된 것을 커밋하지 않고 파일만 저장 후 잘못된 부분 발견, 지울 때 사용(커밋 전 상태로)
- 과거 세이브를 이용

브랜치 개념: 기능 변경을 하고 싶을 때 생성 및 사용 
머지: 한 브랜치 내용 다른 브랜치에 반영
체크아웃: 저장소에서 특정 커밋이나 브랜치로 돌아갈 때 사용

https://learngitbranching.js.org/ 접속

- 브랜치 시 브랜치 전의 내용과 같음 기존 내용 변경 없이, 브랜치 당 파일을 하나씩 에딧 권장 
- 브랜치에서 작업한 내용이 좋으면 머지

코드 상에선 체크아웃 UI 상에선 마우스 클릭

origin/main 확인 후 push

합쳐질 때 부분 선택 시 브랜치를 하는 방법으로 쉽게 할 수 있음

헤드브랜치: 현재 브랜치
병합시 내용이 병합된다

충돌: 같은 파일 에딧에 대한 다수의 에딧 후 커밋, 병합 시(자동병합 실패)
해결: 에디터 이용, 병합툴 이용(큰 코드 에딧 시 지원하는 다른 툴임), sourcetree이용

- 내 것(헤드 브랜치)과 저장소 것(체크아웃 하지 않은 브랜치)으로 구분
헤드는 메인 컨플릭트는 재작성된 것
선택해 에딧 후 커밋

gitignore: 로그파일 변경등을 스테이지에 올리지 않는 것
다운로드 pull, 업로드 push

리셋기능: 강제 푸시 (권장 않음) || 이전 커밋 사라짐 
과거 origin과 후 푸시

리셋 외의 방법 - 브랜치가 많으면 지저분해짐
브랜치를 만들어서 커밋 되돌리기
1. main에 새 코드
2. origin/main에 브랜치 update_branch추가
3. 코드추가, 커밋
4. main에서 push
5. 병합
브랜치를 열면 과거 정보가 살아있으므로 이 방식이 더 권장됨

revert: 리셋 사용시 기존까지의 정보가 사라지지만 revert는 사라지지 않고 해당 브랜치로 이동하는 것